(defstruct (tr-node (:conc-name nil))
  val
  (children (list)))

(deftest test-tr-delete ()
  (check
   (equalp (let ((trie (make-tr-node)))
	     (tr-add "pie" 5 trie)
	     (tr-add "pin" 11 trie)
	     (tr-add "p" 100 trie)
	     (tr-add "a" 20 trie)
	     (tr-delete "pie" trie)
	     trie)
	   (make-tr-node :children (list (cons #\a (make-tr-node :val 20))
					 (cons #\p (make-tr-node :val 100
								 :children (list (cons #\i (make-tr-node :children (list (cons #\n (make-tr-node :val 11)))))))))))
    (equalp (let ((trie (make-tr-node)))
	      (tr-add "pin" 11 trie)
	      (tr-add "p" 100 trie)
	      (tr-add "a" 20 trie)
	      (tr-delete "pin" trie)
	      trie)
	    (make-tr-node :children (list (cons #\a (make-tr-node :val 20))
					  (cons #\p (make-tr-node :val 100)))))
    (equalp (let ((trie (make-tr-node)))
	      (tr-add "p" 100 trie)
	      (tr-add "a" 20 trie)
	      (tr-delete "a" trie)
	      trie)
	    (make-tr-node :children (list (cons #\p (make-tr-node :val 100)))))
    (equalp (let ((trie (make-tr-node)))
	      (tr-add "p" 100 trie)
	      (tr-delete "p" trie)
	      trie)
	    (make-tr-node))))

(deftest test-has-loop ()
  (check
    (equal (let ((g '((1 . nil))))
	     (has-loop g 1))
	   nil)
    (equal (let ((g '((1 . 2) (2 . 3) (3 . nil))))
	     (has-loop g 1))
	   nil)
    (equal (let ((g '((1 . (2 3)) (2 . nil) (3 . nil))))
	     (has-loop g 1))
	   nil)
    (equal (let ((g '((1 . (2 3)) (2 . (3 4)) (3 . nil) (4 . nil))))
	     (has-loop g 2))
	   nil)
    (equal (let ((g '((1 . 1))))
	     (has-loop g 1))
	   T)
    (equal (let ((g '((1 . 2) (2 . 1))))
	     (has-loop g 2))
	   T)
    (equal (let ((g '((1 . 2) (2 . (4 3)) (4 . nil) (3 . 1))))
	     (has-loop g 2))
	   T)
    (equal (let ((g '((1 . 2) (2 . (4 3)) (4 . nil) (3 . 1))))
	     (has-loop g 4))
	   nil)))


(defun test-lab09 ()
  (test-has-loop)
  (test-tr-delete))


